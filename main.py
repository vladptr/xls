import discord 
from discord.ext import commands
from discord.ui import View, Select
import discord
import random
import yt_dlp
import asyncio
from dotenv import load_dotenv
import os
import nacl
import time
import sqlite3
from datetime import datetime, timedelta
from webserver import keep_alive
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib import rcParams

setup_messages = {}
channel_locks = {}
room_modes = {}
last_rename_times = {} 

users = {}
weeks = []

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.voice_states = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏
music_queue = []
repeat_mode = False

YDL_OPTIONS = {'format': 'bestaudio'}
FFMPEG_OPTIONS = {'options': '-vn'}

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.voice_states = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)
#//////////////////////////////////////

LEADERBOARD_CHANNEL_ID = 1373789452463243314
conn = sqlite3.connect("voice_stats.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS voice_time (
    user_id INTEGER PRIMARY KEY,
    total_seconds INTEGER
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS voice_sessions (
    user_id INTEGER,
    start_time REAL
)
""")
conn.commit()

#//////////////////////////////////////
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏
music_queue = []
repeat_mode = False

YDL_OPTIONS = {'format': 'bestaudio'}
FFMPEG_OPTIONS = {'options': '-vn'}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
TRIGGER_CHANNELS = {
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–∫–µ–¥ —Ä—É–º—É": {"base": "üèÜ„Éª–†–∞–Ω–∫–µ–¥ —Ä—É–º–∞", "category": "–†–∞–Ω–∫–µ–¥üî¥"},
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å –ø–∞–±–ª–∏–∫ —Ä—É–º—É": {"base": "üü¢„Éª–ü–∞–±–ª–∏–∫ —Ä—É–º–∞", "category": "–ü–∞–±–ª–∏–∫üî¥"},
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–º–Ω–∞—Ç—É": {"base": "üéÆ„Éª–ö–∞—Å—Ç–æ–º –∏–≥—Ä–∞", "category": "–ö–∞—Å—Ç–æ–º–∫–∏üî¥"}
}

created_channels = {}
channel_bases = {}

# –ú—É–∑ —Ñ—É–Ω–∫—Ü–∏–∏
async def play_next(ctx):
    global music_queue, repeat_mode
    if music_queue:
        url = music_queue[0] if not repeat_mode else music_queue[-1]

        with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
            info = ydl.extract_info(url, download=False)
            audio_url = info['url']

        source = await discord.FFmpegOpusAudio.from_probe(audio_url, **FFMPEG_OPTIONS)
        ctx.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))

        if not repeat_mode:
            music_queue.pop(0)
    else:
        await asyncio.sleep(1)

@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")

@bot.command()
async def gonki(ctx):
    await ctx.send("–ø–æ–µ—Ö–∞–ª–∏! —è –±–µ—Ä—É –≥–æ–Ω–æ—á–Ω—É—é –∫–∞–ª—è—Å–∫—É ‚ôø")

@bot.command()
async def cleargraf(ctx):
    global users, weeks
    try:
        # –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        users.clear()
        weeks.clear()

        # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect("voice_stats.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM weekly_voice_stats")
        conn.commit()
        conn.close()

        await ctx.send("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
#//////////////////////////////////////

@bot.command()
async def leaderboard(ctx):
    cursor.execute("SELECT user_id, total_seconds FROM voice_time ORDER BY total_seconds DESC LIMIT 30")
    rows = cursor.fetchall()
    if not rows:
        await ctx.send("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö!")
        return

    leaderboard_text = "**üèÜ –¢–æ–ø 30 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö:**\n"
    for i, (user_id, total_seconds) in enumerate(rows, start=1):
        member = ctx.guild.get_member(user_id)
        name = member.display_name if member else f"User {user_id}"
        hours, remainder = divmod(total_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        leaderboard_text += f"{i}. {name}: {hours}—á {minutes}–º {seconds}—Å\n"

    await ctx.send(leaderboard_text)

#//////////////////////////////////////
@bot.command()
async def join(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        if ctx.voice_client is None:
            await channel.connect()
            await ctx.send("–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
    else:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

@bot.command()
async def play(ctx, url):
    music_queue.append(url)
    await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {url}")
    if not ctx.voice_client:
        await join(ctx)
    if not ctx.voice_client.is_playing():
        await play_next(ctx)

@bot.command()
async def repeat(ctx):
    global repeat_mode
    repeat_mode = not repeat_mode
    await ctx.send(f"–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ {'–≤–∫–ª—é—á–µ–Ω' if repeat_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")

@bot.command()
async def skip(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await ctx.send("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")

@bot.command()
async def queue(ctx):
    if music_queue:
        await ctx.send("–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(music_queue))
    else:
        await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@bot.command()
async def playlist(ctx):
    if music_queue:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç:\n" + "\n".join(music_queue))
    else:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.")

@bot.command()
async def playlist_add(ctx, url):
    music_queue.append(url)
    await ctx.send(f"–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {url}")

@bot.command()
async def playlist_delete(ctx, index: int):
    if 0 <= index < len(music_queue):
        removed_track = music_queue.pop(index)
        await ctx.send(f"–¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {removed_track}")
    else:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞.")

@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("–í—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    else:
        await ctx.send("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

# –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
class RoomTypeSelect(Select):
    def __init__(self, user_id, channel_id, mode="default"):
        # mode: "default" –¥–ª—è —Ä–∞–Ω–∫–µ–¥/–ø–∞–±–ª–∏–∫, "custom" –¥–ª—è –∫–∞—Å—Ç–æ–º–æ–∫
        if mode == "custom":
            options = [
                discord.SelectOption(label="Valorant", value="üéÆ„ÉªValorant"),
                discord.SelectOption(label="Among Us", value="üéÆ„ÉªAmong Us"),
                discord.SelectOption(label="CS:GO", value="üéÆ„ÉªCS:GO"),
                discord.SelectOption(label="Pummel party", value="üéÆ„ÉªPummel party"),
                discord.SelectOption(label="PICO PACK", value="üéÆ„ÉªPICO PACK"),
                discord.SelectOption(label="Dota 2", value="‚ôø„ÉªDota 2"),
                discord.SelectOption(label="Apex Legends", value="üéÆ„ÉªApex Legends"),
                discord.SelectOption(label="WARZONE", value="üéÆ„ÉªWARZONE"),
                discord.SelectOption(label="Rocket League", value="üéÆ„ÉªRocket League"),
                discord.SelectOption(label="Helldivers 2", value="üéÆ„ÉªHelldivers 2"),
            ]
        else:
            options = [
                discord.SelectOption(label="–î—É–æ", value="üë•„Éª–î—É–æ"),
                discord.SelectOption(label="–°–∫–≤–∞–¥", value="üë•„Éª–°–∫–≤–∞–¥"),
                discord.SelectOption(label="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", value="üë•„Éª–°–∫–≤–∞–¥+")
            ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã", min_values=1, max_values=1, options=options)
        self.user_id = user_id
        self.channel_id = channel_id
        self.mode = mode

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É!", ephemeral=True)
            return

        now = time.time()
        last_time = last_rename_times.get(self.channel_id, 0)
        cooldown = 660  # —Å–µ–∫—É–Ω–¥—ã

        if now - last_time < cooldown:
            remaining = round(cooldown - (now - last_time), 1)
            await interaction.response.send_message(
                f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ {cooldown} —Å–µ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remaining} —Å–µ–∫. –ù–µ –∑–∞—ë–±—ã–≤–∞–π –±–æ—Ç–∞ –∏–Ω–∞—á–µ –±—É–¥–µ—à—å –ø–æ—Å–ª–∞–Ω –Ω–∞—Ö—É–π!", ephemeral=True
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        last_rename_times[self.channel_id] = now
        
        channel = interaction.guild.get_channel(self.channel_id)
        if channel:
            await channel.edit(name=self.values[0])
            await interaction.response.send_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{self.values[0]}**", ephemeral=True)
        else:
            await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)

class PlayerCountSelect(Select):
    def __init__(self, user_id, channel_id, mode="default"):
        if mode == "custom":
            options = [
                discord.SelectOption(label=f"+{i}", value=str(i)) for i in range(1, 11)
            ] + [discord.SelectOption(label="–Ω–µ –∏—Å–∫–∞—Ç—å", value="none")]
        else:
            options = [
                discord.SelectOption(label="1Ô∏è‚É£", value="1"),
                discord.SelectOption(label="2Ô∏è‚É£", value="2"),
                discord.SelectOption(label="3Ô∏è‚É£", value="3"),
                discord.SelectOption(label="–Ω–µ –∏—Å–∫–∞—Ç—å", value="none")
            ]
        super().__init__(placeholder="–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ?", min_values=1, max_values=1, options=options)
        self.user_id = user_id
        self.channel_id = channel_id
        self.mode = mode

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É!", ephemeral=True)
            return

        selection = self.values[0]
        if selection == "none":
            await interaction.response.send_message("–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç '–ù–µ –∏—Å–∫–∞—Ç—å', —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
            return
            
        guild = interaction.guild
        voice_channel = guild.get_channel(self.channel_id)
        if not voice_channel:
            await interaction.response.send_message("–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        text_channel = discord.utils.get(guild.text_channels, name="üîç„Éª–ø–æ–∏—Å–∫-—Ç–∏–º—ã")
        if not text_channel:
            await interaction.response.send_message("–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª '–ø–æ–∏—Å–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        count = self.values[0]
        msg = f"+{count} <@&1159121098965786634> <#{voice_channel.id}> {interaction.user.mention}"
        sent_msg = await text_channel.send(msg)
        await interaction.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª '–ø–æ–∏—Å–∫'.", ephemeral=True)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
        await asyncio.sleep(10800)
        await sent_msg.delete()


class RoomSetupView(View):
    def __init__(self, user_id, channel_id, mode="default"):
        super().__init__(timeout=300000)
        self.add_item(RoomTypeSelect(user_id, channel_id, mode))
        self.add_item(PlayerCountSelect(user_id, channel_id, mode))

async def get_channel_lock(channel_id):
    if channel_id not in channel_locks:
        channel_locks[channel_id] = asyncio.Lock()
    return channel_locks[channel_id]

@bot.event
async def on_voice_state_update(member, before, after):
    guild = member.guild
#//////////////////////////////////////
    user_id = member.id
    now = datetime.utcnow().timestamp()

    if after.channel and not before.channel:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π
        cursor.execute("INSERT INTO voice_sessions (user_id, start_time) VALUES (?, ?)", (user_id, now))
        conn.commit()

    elif before.channel and not after.channel:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
        cursor.execute("SELECT start_time FROM voice_sessions WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if row:
            start_time = row[0]
            duration = int(now - start_time)
            cursor.execute("DELETE FROM voice_sessions WHERE user_id = ?", (user_id,))
            cursor.execute("INSERT OR IGNORE INTO voice_time (user_id, total_seconds) VALUES (?, 0)", (user_id,))
            cursor.execute("UPDATE voice_time SET total_seconds = total_seconds + ? WHERE user_id = ?", (duration, user_id))
            conn.commit()
#//////////////////////////////////////
    if before.channel and before.channel.id in created_channels:
        await asyncio.sleep(1)  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—å—à–µ, 3 —Å–µ–∫ –º–Ω–æ–≥–æ
        lock = await get_channel_lock(before.channel.id)
        async with lock:
            owner_id = created_channels[before.channel.id]
            members = before.channel.members

            if len(members) == 0:
                # –ö–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞ ‚Äî —É–¥–∞–ª—è–µ–º
                await before.channel.delete()
                created_channels.pop(before.channel.id, None)
                channel_bases.pop(before.channel.id, None)
                setup_messages.pop(before.channel.id, None)
                print(f"–£–¥–∞–ª—ë–Ω –ø—É—Å—Ç–æ–π –∫–∞–Ω–∞–ª: {before.channel.name}")
                room_modes.pop(before.channel.id, None)
                return

            if member.id == owner_id:
                # –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
                new_owner = random.choice(members)
                created_channels[before.channel.id] = new_owner.id

                old_msg = setup_messages.get(before.channel.id)
                if old_msg:
                 try:
                   await old_msg.delete()
                   print("‚úÖ –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                 except discord.NotFound:
                   print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ.")
                 except Exception as e:
                   print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                 finally:
                   setup_messages.pop(before.channel.id, None)


                overwrite = before.channel.overwrites_for(new_owner)
                overwrite.manage_channels = True
                overwrite.move_members = True
                overwrite.connect = True
                await before.channel.set_permissions(new_owner, overwrite=overwrite)

                mode = room_modes.get(before.channel.id, "default")  # ‚úÖ –ë–µ—Ä—ë–º –Ω–∞–ø—Ä—è–º—É—é


                view = RoomSetupView(new_owner.id, before.channel.id, mode)
                new_msg = await before.channel.send(
                    f"–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã –≤—ã—à–µ–ª. –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {new_owner.mention}\n"
                    f"{new_owner.mention}, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É:",
                    view=view
                )
                setup_messages[before.channel.id] = new_msg
                print(f"–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {new_owner.name} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {before.channel.name}")



    if not after.channel or after.channel.name not in TRIGGER_CHANNELS:
        return

    if after.channel and after.channel.name in TRIGGER_CHANNELS:
        conf = TRIGGER_CHANNELS[after.channel.name]
        category = discord.utils.get(guild.categories, name=conf["category"])

        if not category:
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {conf['category']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        existing = [
            ch for ch in guild.voice_channels
            if ch.name.startswith(conf["base"]) and ch.category == category
        ]
        number = 1
        base_name = conf["base"]
        new_name = f"{base_name} #{number}"
        while any(ch.name == new_name for ch in existing):
            number += 1
            new_name = f"{base_name} #{number}"

        new_channel = await guild.create_voice_channel(new_name, category=category)
        await member.move_to(new_channel)

        created_channels[new_channel.id] = member.id
        channel_bases[new_channel.id] = base_name

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º mode –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ–≤
    if conf["category"] == "–ö–∞—Å—Ç–æ–º–∫–∏üî¥":
        mode = "custom"
    else:
        mode = "default"
    room_modes[new_channel.id] = mode 

    view = RoomSetupView(member.id, new_channel.id, mode)
    msg = await new_channel.send(f"{member.mention}, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É:", view=view)
    setup_messages[new_channel.id] = msg


token = os.getenv("TOKEN")

if not token:
    print("‚ùå TOKEN is missing!")
else:
    print("‚úÖ Token loaded!")

#/////////////////////////////////////////////////////

async def generate_and_send_graph(bot, channel_id, cycle_number):
    conn = sqlite3.connect("voice_stats.db")
    cursor = conn.cursor()

    cursor.execute("""
        SELECT week_number, user_id, total_seconds
        FROM weekly_voice_stats
        WHERE cycle_number = ?
        ORDER BY week_number, total_seconds DESC
    """, (cycle_number,))
    data = cursor.fetchall()

    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    users = {}
    weeks = set()
    for week_number, user_id, total_seconds in data:
        weeks.add(week_number)
        users.setdefault(user_id, {})[week_number] = total_seconds / 3600

    weeks = sorted(list(weeks))
    user_ids = list(users.keys())

    if not user_ids:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    rcParams['font.family'] = 'Arial'
    rcParams['text.color'] = 'white'
    rcParams['axes.labelcolor'] = 'white'
    rcParams['xtick.color'] = 'white'
    rcParams['ytick.color'] = 'white'


    # –°–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ–º xmin, xmax, ymin, ymax
    xmin = min(weeks)
    xmax = max(weeks)
    range_x = xmax - xmin if xmax != xmin else 1  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
    xmax += range_x * 0.18  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∞ 15%

    max_y = max([max(users[u].values()) for u in user_ids]) * 1.1 if user_ids else 1
    ymin, ymax = 0, max_y

    fig, ax = plt.subplots(figsize=(19.2, 10.8), dpi=100)
    
    background_img = mpimg.imread('backpack.jpg')

    fig.patch.set_alpha(0.0)
    fig.patch.set_facecolor('none')
    ax.set_facecolor('none')

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ–Ω —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    ax.imshow(background_img, extent=[xmin, xmax, ymin, ymax], aspect='auto', zorder=0)

    ax.set_xlim(xmin, xmax)
    ax.set_ylim(ymin, ymax)

    ax.tick_params(colors='white')
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    user_sums = {user_id: sum(users[user_id].values()) for user_id in user_ids}
    user_ids_sorted = sorted(user_ids, key=lambda u: user_sums[u], reverse=True)

    lines = []
    labels = []

    for user_id in user_ids_sorted:
        member = bot.get_guild(1371926685435428924).get_member(user_id)
        member_name = member.display_name if member else f"User {user_id}"
        times = [users[user_id].get(week, 0) for week in weeks]
        line, = ax.plot(weeks, times, marker='o', label=member_name, zorder=1)
        lines.append(line)
        labels.append(member_name)
        for week, time in zip(weeks, times):
            if time > 0:
                ax.text(week, time, f"{int(time)}—á {int((time % 1) * 60)}–º", fontsize=8, weight='bold', color='white', zorder=2)



    ax.set_xlabel("–ù–µ–¥–µ–ª—è")
    ax.set_ylabel("–í—Ä–µ–º—è (—á–∞—Å—ã)")
    ax.set_title(f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –¶–∏–∫–ª {cycle_number}")

    ax.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.1, -0.07), ncol=10, fontsize=8, frameon=False)


    filename = f"graph_cycle_{cycle_number}.png"
    plt.savefig(filename, bbox_inches='tight', facecolor=fig.get_facecolor())
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
    channel = bot.get_channel(channel_id)
    if channel:
        with open(filename, 'rb') as f:
            await channel.send(content=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Ü–∏–∫–ª {cycle_number}:", file=discord.File(f))
    else:
        print("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    conn.close()

@bot.event
async def on_ready():
    bot.loop.create_task(weekly_reset())

#/////////////////////////////////////////////////////

def init_db():
    conn = sqlite3.connect("voice_stats.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS weekly_voice_stats (
            cycle_number INTEGER,
            week_number INTEGER,
            user_id INTEGER,
            total_seconds INTEGER
        )
    """)
    conn.commit()
    conn.close()
#/////////////////////////////////////////////////////

async def weekly_reset():
    while True:
        now = datetime.utcnow()
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ 00:00
        next_monday = now + timedelta(days=(7 - now.weekday()))
        next_reset = datetime.combine(next_monday.date(), datetime.min.time())
        wait_time = (next_reset - now).total_seconds() #2*60
        await asyncio.sleep(wait_time)
#/////////////////////////////////////////////////////
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
        conn = sqlite3.connect("voice_stats.db")
        cursor = conn.cursor()
        cursor.execute("SELECT MAX(cycle_number) FROM weekly_voice_stats")
        row = cursor.fetchone()
        cycle_number = (row[0] or 0)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ü–∏–∫–ª >= 12 –Ω–µ–¥–µ–ª—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ü–∏–∫–ª–∞
        cursor.execute("SELECT COUNT(DISTINCT week_number) FROM weekly_voice_stats WHERE cycle_number = ?", (cycle_number,))
        week_count = cursor.fetchone()[0]
        if week_count >= 12:
            cycle_number += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ weekly_voice_stats
        cursor.execute("SELECT user_id, total_seconds FROM voice_time")
        for user_id, total_seconds in cursor.fetchall():
            cursor.execute("INSERT INTO weekly_voice_stats (cycle_number, week_number, user_id, total_seconds) VALUES (?, ?, ?, ?)",
                           (cycle_number, week_count + 1, user_id, total_seconds))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∫–∞–Ω–∞–ª
        await generate_and_send_graph(bot, channel_id=1373789452463243314, cycle_number=cycle_number)
#/////////////////////////////////////////////////////

        # –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cursor.execute("DELETE FROM voice_time")
        conn.commit()
        print("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞!")

@bot.event
async def on_ready():
    init_db()
    bot.loop.create_task(weekly_reset())
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

#//////////////////////////////////////

async def main():
    keep_alive()
    await bot.start(token)

asyncio.run(main())
#await bot.start("")
