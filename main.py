import discord
from discord.ext import commands, tasks
from discord.ui import View, Select
from discord.ui import View, Button
import random
import time
import yt_dlp
import asyncio
from dotenv import load_dotenv
import os
import uuid
import json
import subprocess
import io
import nacl
import math
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib import rcParams
import asyncpg
from datetime import datetime, timedelta
from supabase import create_client, Client
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from webserver import keep_alive
from datetime import datetime, UTC
from PIL import Image, ImageDraw, ImageFont, ImageOps
from io import BytesIO
import requests

setup_messages = {}
channel_locks = {}
room_modes = {}
last_rename_times = {}

PUBG_API_KEY = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjNjZhZjAzMC01NjZmLTAxM2UtNWVlNi03NmNhZDljYTc2ODYiLCJpc3MiOiJnYW1lbG9ja2VyIiwiaWF0IjoxNzU0NjQ4NjYyLCJwdWIiOiJibHVlaG9sZSIsInRpdGxlIjoicHViZyIsImFwcCI6InhscyJ9.RNogGBm2XdHmPhvUNzgGJWs6bOVNubMW48xxwt6bnXo"
PUBG_PLATFORM = "steam"
print("PUBG API key:", repr(PUBG_API_KEY))

users = {}
weeks = []
subprocess.run(["chmod", "+x", "./ffmpeg"])
intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.voice_states = True
intents.messages = True
intents.message_content = True

service_account_info = json.loads(os.environ["GOOGLE_CREDS_JSON"])

credentials = service_account.Credentials.from_service_account_info(
    service_account_info,
    scopes=[
        "https://www.googleapis.com/auth/drive",  # –∏–ª–∏ –¥—Ä—É–≥–∏–µ –Ω—É–∂–Ω—ã–µ —Ç–µ–±–µ
    ]
)
drive_service = build('drive', 'v3', credentials=credentials)

BLACKLISTED_CHANNELS = {
    1187507350156886096,
    848713620959002684,
}



bot = commands.Bot(command_prefix="!", intents=intents)
LEADERBOARD_CHANNEL_ID = 1371926685435428927

def get_connection():
    url = "https://qyqicdyzaagumqjlczoj.supabase.co"
    key = os.getenv("keykey")
    
    if not url or not key:
        raise Exception("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_KEY")
    
    print("üîê URL:", os.getenv("https://qyqicdyzaagumqjlczoj.supabase.co"))
    print("üîê KEY:", os.getenv("keykey")[:10], "...")

    return create_client(url, key)

supabase = get_connection()
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏
music_queue = []
repeat_mode = True

YDL_OPTIONS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'quiet': True,
    'extract_flat': False,
    'ffmpeg_location': './ffmpeg'
}





YDL_OPTIONS = {'format': 'bestaudio'}
FFMPEG_OPTIONS = {'options': '-vn'}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
TRIGGER_CHANNELS = {
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–∫–µ–¥ —Ä—É–º—É": {"base": "üèÜ„Éª–†–∞–Ω–∫–µ–¥ —Ä—É–º–∞", "category": "–†–∞–Ω–∫–µ–¥üî¥"},
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å –ø–∞–±–ª–∏–∫ —Ä—É–º—É": {"base": "üü¢„Éª–ü–∞–±–ª–∏–∫ —Ä—É–º–∞", "category": "–ü–∞–±–ª–∏–∫üî¥"},
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–º–Ω–∞—Ç—É": {"base": "üéÆ„Éª–ö–∞—Å—Ç–æ–º –∏–≥—Ä–∞", "category": "–ö–∞—Å—Ç–æ–º–∫–∏üî¥"}
}

created_channels = {}
channel_bases = {}

# –ú—É–∑ —Ñ—É–Ω–∫—Ü–∏–∏
async def play_next(vc):
    global music_queue, repeat_mode

    if not vc.is_connected():
        print("‚ùå VoiceClient –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ play_next")
        return

    if music_queue:
        url = music_queue[0] if not repeat_mode else music_queue[-1]
        print(f"‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {url}")

        try:
            with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
                info = ydl.extract_info(url, download=False)
                audio_url = info['url']

            print(f"üîó –°–∫–∞—á–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ: {audio_url}")

            source = discord.FFmpegPCMAudio(
                audio_url,
                executable="./ffmpeg",
                before_options="-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5",
                options="-vn -loglevel quiet"
            )

            def after_playing(error):
                if error:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ after_playing: {error}")
                else:
                    print("‚úÖ –¢—Ä–µ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")

                fut = asyncio.run_coroutine_threadsafe(play_next(vc), bot.loop)
                try:
                    fut.result()
                except Exception as e:
                    print(f"‚ùó –û—à–∏–±–∫–∞ –≤ play_next after: {e}")

            vc.play(source, after=after_playing)
            print("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")

            if not repeat_mode:
                music_queue.pop(0)

        except Exception as e:
            print(f"‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    else:
        print("üö™ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∞—é—Å—å")
        await vc.disconnect()


@bot.command()
async def testplay(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        vc = await channel.connect()

        source = discord.FFmpegPCMAudio(
            "Tokio_Machi.mp3",  # –ª—é–±–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π mp3 —Ñ–∞–π–ª
            executable="./ffmpeg",
            options="-vn -loglevel quiet"
        )

        vc.play(source)
        await ctx.send("üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É test.mp3")
    else:
        await ctx.send("–¢—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")


@bot.event
async def on_member_join(member):
    channel_id = 1183130293545222205  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    channel = bot.get_channel(channel_id)
    if channel:
        await channel.send(f"–ü—Ä–∏–≤–µ—Ç, {member.mention}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä! üéâ –ü—Ä–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–º–µ–Ω–∏ —Å–≤–æ–π –Ω–∏–∫ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ: ```–ù–∏–∫ –≤ –∏–≥—Ä–µ (–ò–º—è)```")
    else:
        print("–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.command(name="clearmsg")
@commands.has_permissions(manage_messages=False)
async def clear_bot_messages(ctx):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ."""
    deleted = 0
    async for message in ctx.channel.history(limit=1000):  # –£–≤–µ–ª–∏—á—å –ª–∏–º–∏—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if message.author == bot.user:
            try:
                await message.delete()
                deleted += 1
            except discord.Forbidden:
                await ctx.send("‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
                return
            except discord.HTTPException:
                continue  # –ò–Ω–æ–≥–¥–∞ Discord –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    await ctx.send(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞.", delete_after=5)


        
@bot.command()
async def gonki(ctx):
    await ctx.send("–ø–æ–µ—Ö–∞–ª–∏! —è –±–µ—Ä—É –≥–æ–Ω–æ—á–Ω—É—é –∫–∞–ª—è—Å–∫—É ‚ôø")
    

        
@bot.command()
async def cleargraph(ctx):
    try:
        response = supabase.table("weekly_voice_stats").delete().neq("cycle_number", -1).execute()
        response = supabase.table("voice_time").delete().gt("user_id", 0).execute()
        if response.data is None:
            await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).")
            return

        await ctx.send("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

class LeaderboardView(View):
    def __init__(self, data, ctx):
        super().__init__(timeout=60)
        self.data = data
        self.ctx = ctx
        self.page = 0
        self.items_per_page = 10
        self.max_page = math.ceil(len(data) / self.items_per_page) - 1

        self.prev_button = Button(label="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", style=discord.ButtonStyle.primary)
        self.next_button = Button(label="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", style=discord.ButtonStyle.primary)
        self.prev_button.callback = self.prev_page
        self.next_button.callback = self.next_page
        self.add_item(self.prev_button)
        self.add_item(self.next_button)

    async def prev_page(self, interaction):
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("–≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è —Ç–µ–±—è!", ephemeral=True)
            return
        if self.page > 0:
            self.page -= 1
            await self.update_message(interaction)

    async def next_page(self, interaction):
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("–≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è —Ç–µ–±—è!", ephemeral=True)
            return
        if self.page < self.max_page:
            self.page += 1
            await self.update_message(interaction)

    async def update_message(self, interaction):
        embed = await self.generate_embed()
        await interaction.response.edit_message(embed=embed, view=self)

    async def generate_embed(self):
        start = self.page * self.items_per_page
        end = start + self.items_per_page
        page_data = self.data[start:end]

        embed = discord.Embed(
            title=f"üèÜ –¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page + 1}/{self.max_page + 1})",
            color=discord.Color.gold()
        )

        for i, row in enumerate(page_data, start=start + 1):
            user_id = row['user_id']
            total_seconds = row['total_seconds']
            member = self.ctx.guild.get_member(user_id)
            if member is None:
                try:
                    member = await self.ctx.guild.fetch_member(user_id)
                except discord.NotFound:
                    member = None

            name = member.display_name if member else f"User {user_id}"
            hours, remainder = divmod(total_seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            embed.add_field(name=f"{i}. {name}", value=f"{hours}—á {minutes}–º {seconds}—Å", inline=False)

        return embed

@commands.cooldown(1, 60, commands.BucketType.user)
@bot.command()
async def leaderboard(ctx):
    try:
        response = supabase.table("voice_time")\
            .select("user_id,total_seconds")\
            .order("total_seconds", desc=True)\
            .limit(50)\
            .execute()
        data = response.data

        if not data:
            await ctx.send("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö!")
            return

        view = LeaderboardView(data, ctx)
        embed = await view.generate_embed()
        message = await ctx.send(embed=embed, view=view)
        
       
        await asyncio.sleep(300)
        await message.delete()
        try:
            await ctx.message.delete()
        except discord.errors.Forbidden:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
#//////////////////////////////////////
@bot.command()
async def join(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        print(f"üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: {channel.name}")
        if ctx.voice_client is None:
            await channel.connect()
            await ctx.send("–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
        else:
            print("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")
    else:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º")


@bot.command()
async def play(ctx, url):
    music_queue.append(url)
    await ctx.send(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ: {url}")

    if not ctx.voice_client or not ctx.voice_client.is_connected():
        await join(ctx)
        await asyncio.sleep(1)

    vc = ctx.voice_client

    if vc and not vc.is_playing():
        await play_next(vc)




@bot.command()
async def repeat(ctx):
    global repeat_mode
    repeat_mode = not repeat_mode
    await ctx.send(f"–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ {'–≤–∫–ª—é—á–µ–Ω' if repeat_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")

@bot.command()
async def skip(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await ctx.send("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")

@bot.command()
async def queue(ctx):
    if music_queue:
        await ctx.send("–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(music_queue))
    else:
        await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@bot.command()
async def playlist(ctx):
    if music_queue:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç:\n" + "\n".join(music_queue))
    else:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.")

@bot.command()
async def playlist_add(ctx, url):
    music_queue.append(url)
    await ctx.send(f"–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {url}")

@bot.command()
async def playlist_delete(ctx, index: int):
    if 0 <= index < len(music_queue):
        removed_track = music_queue.pop(index)
        await ctx.send(f"–¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {removed_track}")
    else:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞.")

@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("–í—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    else:
        await ctx.send("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

# –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
class RoomTypeSelect(Select):
    def __init__(self, user_id, channel_id, mode="default"):
        # mode: "default" –¥–ª—è —Ä–∞–Ω–∫–µ–¥/–ø–∞–±–ª–∏–∫, "custom" –¥–ª—è –∫–∞—Å—Ç–æ–º–æ–∫
        if mode == "custom":
            options = [
                discord.SelectOption(label="Valorant", value="üéÆ„ÉªValorant"),
                discord.SelectOption(label="Among Us", value="üéÆ„ÉªAmong Us"),
                discord.SelectOption(label="CS:GO", value="üéÆ„ÉªCS:GO"),
                discord.SelectOption(label="Pummel party", value="üéÆ„ÉªPummel party"),
                discord.SelectOption(label="PICO PACK", value="üéÆ„ÉªPICO PACK"),
                discord.SelectOption(label="Dota 2", value="‚ôø„ÉªDota 2"),
                discord.SelectOption(label="Apex Legends", value="üéÆ„ÉªApex Legends"),
                discord.SelectOption(label="WARZONE", value="üéÆ„ÉªWARZONE"),
                discord.SelectOption(label="Rocket League", value="üéÆ„ÉªRocket League"),
                discord.SelectOption(label="Helldivers 2", value="üéÆ„ÉªHelldivers 2"),
            ]
        else:
            options = [
                discord.SelectOption(label="–î—É–æ", value="üë•„Éª–î—É–æ"),
                discord.SelectOption(label="–°–∫–≤–∞–¥", value="üë•„Éª–°–∫–≤–∞–¥"),
                discord.SelectOption(label="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", value="üë•„Éª–°–∫–≤–∞–¥+")
            ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã", min_values=1, max_values=1, options=options)
        self.user_id = user_id
        self.channel_id = channel_id
        self.mode = mode

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É!", ephemeral=True)
            return

        now = time.time()
        last_time = last_rename_times.get(self.channel_id, 0)
        cooldown = 660  # —Å–µ–∫—É–Ω–¥—ã

        if now - last_time < cooldown:
            remaining = round(cooldown - (now - last_time), 1)
            await interaction.response.send_message(
                f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ {cooldown} —Å–µ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remaining} —Å–µ–∫. –ù–µ –∑–∞—ë–±—ã–≤–∞–π –±–æ—Ç–∞ –∏–Ω–∞—á–µ –±—É–¥–µ—à—å –ø–æ—Å–ª–∞–Ω –Ω–∞—Ö—É–π!", ephemeral=True
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        last_rename_times[self.channel_id] = now

        channel = interaction.guild.get_channel(self.channel_id)
        if channel:
            await channel.edit(name=self.values[0])
            await interaction.response.send_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{self.values[0]}**", ephemeral=True)
        else:
            await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)

class PlayerCountSelect(Select):
    def __init__(self, user_id, channel_id, mode="default"):
        if mode == "custom":
            options = [
                discord.SelectOption(label=f"+{i}", value=str(i)) for i in range(1, 11)
            ] + [discord.SelectOption(label="–Ω–µ –∏—Å–∫–∞—Ç—å", value="none")]
        else:
            options = [
                discord.SelectOption(label="1Ô∏è‚É£", value="1"),
                discord.SelectOption(label="2Ô∏è‚É£", value="2"),
                discord.SelectOption(label="3Ô∏è‚É£", value="3"),
                discord.SelectOption(label="–Ω–µ –∏—Å–∫–∞—Ç—å", value="none")
            ]
        super().__init__(placeholder="–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ?", min_values=1, max_values=1, options=options)
        self.user_id = user_id
        self.channel_id = channel_id
        self.mode = mode

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É!", ephemeral=True)
            return

        selection = self.values[0]
        if selection == "none":
            await interaction.response.send_message("–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç '–ù–µ –∏—Å–∫–∞—Ç—å', —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
            return

        guild = interaction.guild
        voice_channel = guild.get_channel(self.channel_id)
        if not voice_channel:
            await interaction.response.send_message("–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        text_channel = discord.utils.get(guild.text_channels, name="üîç„Éª–ø–æ–∏—Å–∫-—Ç–∏–º—ã")
        if not text_channel:
            await interaction.response.send_message("–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª '–ø–æ–∏—Å–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        count = self.values[0]
        msg = f"+{count} <@&1159121098965786634> <#{voice_channel.id}> {interaction.user.mention}"
        sent_msg = await text_channel.send(msg)
        await interaction.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª '–ø–æ–∏—Å–∫'.", ephemeral=True)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
        await asyncio.sleep(10800)
        await sent_msg.delete()


class RoomSetupView(View):
    def __init__(self, user_id, channel_id, mode="default"):
        super().__init__(timeout=300000)
        self.add_item(RoomTypeSelect(user_id, channel_id, mode))
        self.add_item(PlayerCountSelect(user_id, channel_id, mode))

async def get_channel_lock(channel_id):
    if channel_id not in channel_locks:
        channel_locks[channel_id] = asyncio.Lock()
    return channel_locks[channel_id]

@bot.event
async def on_voice_state_update(member, before, after):
    user_id = member.id
    now = datetime.now(UTC).timestamp()

    try:
        if after.channel and not before.channel:
            if after.channel.id in BLACKLISTED_CHANNELS:
                return

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            response = supabase.table("voice_sessions").insert({
                "user_id": user_id,
                "start_time": now
            }).execute()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å
            if not response.data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–µ—Å—Å–∏–∏: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Supabase")

        elif before.channel and not after.channel:
            if before.channel.id in BLACKLISTED_CHANNELS:
                return
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ‚Äî –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            row = supabase.table("voice_sessions").select("start_time").eq("user_id", user_id).limit(1).execute()

            if not row.data:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            start_time = row.data[0]["start_time"]
            duration = int(now - start_time)

            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            del_resp = supabase.table("voice_sessions").delete().eq("user_id", user_id).execute()
            if not del_resp.data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")

            # –û–±–Ω–æ–≤–ª—è–µ–º/–≤—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ voice_time
            time_row = supabase.table("voice_time").select("total_seconds").eq("user_id", user_id).limit(1).execute()
            if time_row.data:
                total_seconds = time_row.data[0]["total_seconds"] + duration
                upd_resp = supabase.table("voice_time").update({"total_seconds": total_seconds}).eq("user_id", user_id).execute()
                if not upd_resp.data:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                ins_resp = supabase.table("voice_time").insert({
                    "user_id": user_id,
                    "total_seconds": duration
                }).execute()
                if not ins_resp.data:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if before.channel and before.channel.id in created_channels:
        await asyncio.sleep(1)
        lock = await get_channel_lock(before.channel.id)
        async with lock:
            owner_id = created_channels[before.channel.id]
            members = before.channel.members

            if len(members) == 0:
                await before.channel.delete()
                created_channels.pop(before.channel.id, None)
                channel_bases.pop(before.channel.id, None)
                setup_messages.pop(before.channel.id, None)
                print(f"–£–¥–∞–ª—ë–Ω –ø—É—Å—Ç–æ–π –∫–∞–Ω–∞–ª: {before.channel.name}")
                room_modes.pop(before.channel.id, None)
                return

            if member.id == owner_id:
                new_owner = random.choice(members)
                created_channels[before.channel.id] = new_owner.id
                old_msg = setup_messages.get(before.channel.id)
                if old_msg:
                    try:
                        await old_msg.delete()
                        print("‚úÖ –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                    except discord.NotFound:
                        print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ.")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    finally:
                        setup_messages.pop(before.channel.id, None)

                overwrite = before.channel.overwrites_for(new_owner)
                overwrite.manage_channels = True
                overwrite.move_members = True
                overwrite.connect = True
                await before.channel.set_permissions(new_owner, overwrite=overwrite)

                mode = room_modes.get(before.channel.id, "default")
                view = RoomSetupView(new_owner.id, before.channel.id, mode)
                new_msg = await before.channel.send(
                    f"–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã –≤—ã—à–µ–ª. –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {new_owner.mention}\n"
                    f"{new_owner.mention}, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É:",
                    view=view
                )
                setup_messages[before.channel.id] = new_msg
                print(f"–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {new_owner.name} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {before.channel.name}")

    if not after.channel or after.channel.name not in TRIGGER_CHANNELS:
        return

    if after.channel and after.channel.name in TRIGGER_CHANNELS:
        conf = TRIGGER_CHANNELS[after.channel.name]
        guild = member.guild
        category = discord.utils.get(guild.categories, name=conf["category"])
        if not category:
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {conf['category']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        existing = [
            ch for ch in guild.voice_channels
            if ch.name.startswith(conf["base"]) and ch.category == category
        ]
        number = 1
        base_name = conf["base"]
        new_name = f"{base_name} #{number}"
        while any(ch.name == new_name for ch in existing):
            number += 1
            new_name = f"{base_name} #{number}"

        new_channel = await guild.create_voice_channel(new_name, category=category)
        await member.move_to(new_channel)
        created_channels[new_channel.id] = member.id
        channel_bases[new_channel.id] = base_name

        mode = "custom" if conf["category"] == "–ö–∞—Å—Ç–æ–º–∫–∏üî¥" else "default"
        room_modes[new_channel.id] = mode
        view = RoomSetupView(member.id, new_channel.id, mode)
        msg = await new_channel.send(f"{member.mention}, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É:", view=view)
        setup_messages[new_channel.id] = msg



#/////////////////////////////////////////////////////
async def upload_to_google_drive(file_path, folder_id=None):
    file_metadata = {'name': file_path.split('/')[-1]}
    if folder_id:
        file_metadata['parents'] = [folder_id]

    media = MediaFileUpload(file_path, mimetype='image/png')
    file = drive_service.files().create(
        body=file_metadata,
        media_body=media,
        fields='id, webViewLink'
    ).execute()
    print(f"–§–∞–π–ª {file_path} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive. –°—Å—ã–ª–∫–∞: {file['webViewLink']}")
    return file['id'], file['webViewLink']



async def generate_and_send_graph(bot, channel_id, cycle_number):
    try:
        response = supabase.table("weekly_voice_stats") \
            .select("week_number, user_id, total_seconds") \
            .eq("cycle_number", cycle_number) \
            .order("week_number") \
            .order("total_seconds") \
            .execute()

        data = response.data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return

    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    users = {}
    weeks = set()
    for row in data:
        week_number = row['week_number']
        user_id = row['user_id']
        total_seconds = row['total_seconds']
        weeks.add(week_number)
        users.setdefault(user_id, {})[week_number] = total_seconds / 3600  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Å—ã

    weeks = sorted(list(weeks))
    user_ids = list(users.keys())

    if not user_ids:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    guild = bot.get_guild(520183812148166656)   
    members_dict = {member.id: member.display_name for member in guild.members}

    rcParams['font.family'] = 'Arial'
    rcParams['text.color'] = 'white'
    rcParams['axes.labelcolor'] = 'white'
    rcParams['xtick.color'] = 'white'
    rcParams['ytick.color'] = 'white'

    xmin = min(weeks)
    xmax = max(weeks)
    range_x = xmax - xmin if xmax != xmin else 1
    xmax += range_x * 0.18

    max_y = max([max(users[u].values()) for u in user_ids]) * 1.1 if user_ids else 1
    ymin, ymax = 0, max_y

    fig, ax = plt.subplots(figsize=(19.2, 10.8), dpi=100)
    #///
    current_dir = os.path.dirname(os.path.abspath(__file__))
    image_path = os.path.join(current_dir, "backpack.jpg")

    if not os.path.exists(image_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
    else:
        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {image_path}")

    background_img = mpimg.imread(image_path)
    #///
    fig.patch.set_alpha(0.0)
    fig.patch.set_facecolor('none')
    ax.set_facecolor('none')
    ax.imshow(background_img, extent=[xmin, xmax, ymin, ymax], aspect='auto', zorder=0)
    ax.set_xlim(xmin, xmax)
    ax.set_ylim(ymin, ymax)
    ax.tick_params(colors='white')
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    user_sums = {user_id: sum(users[user_id].values()) for user_id in user_ids}
    user_ids_sorted = sorted(user_ids, key=lambda u: user_sums[u], reverse=True)
    lines, labels = [], []
    for user_id in user_ids_sorted:
        member = bot.get_guild(520183812148166656).get_member(user_id)
        member_name = member.display_name if member else f"User {user_id}"
        times = [users[user_id].get(week, 0) for week in weeks]
        line, = ax.plot(weeks, times, marker='o', label=member_name, zorder=1)
        lines.append(line)
        labels.append(member_name)
        for week, time in zip(weeks, times):
            if time > 0:
                ax.text(week, time, f"{int(time)}—á {int((time % 1) * 60)}–º", fontsize=8, weight='bold', color='white', zorder=2)

    ax.set_xlabel("–ù–µ–¥–µ–ª—è")
    ax.set_ylabel("–í—Ä–µ–º—è (—á–∞—Å—ã)")
    ax.set_title(f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –¶–∏–∫–ª {cycle_number}")
    ax.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.5, -0.07), ncol=6, fontsize=8, frameon=False)

    filename = f"graph_cycle_{cycle_number}.png"
    plt.savefig(filename, bbox_inches='tight', facecolor=fig.get_facecolor())
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
    channel = await bot.fetch_channel(channel_id)
    if channel:
        with open(filename, 'rb') as f:
            await channel.send(content=f"–¶–∏–∫–ª {cycle_number}:", file=discord.File(f))
    else:
        print("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
    #await upload_to_google_drive(filename, folder_id='1XXjk7oPlijNDSLoiCf2DayVmOMRX-gyK')

#/////////////////////////////////////////////////////

def init_db():
    try:
        # –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ SQL –≤ Supabase
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

#/////////////////////////////////////////////////////
@bot.command()
async def getgraph(ctx, cycle_number: int = None):
    try:
        # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –Ω–æ–º–µ—Ä —Ü–∏–∫–ª–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if cycle_number is None:
            row = supabase.table("weekly_voice_stats") \
                .select("cycle_number") \
                .order("cycle_number", desc=True) \
                .limit(1) \
                .execute()

            if row.data:
                cycle_number = row.data[0]["cycle_number"]
            else:
                await ctx.send("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
                return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await generate_and_send_graph(bot, ctx.channel.id, cycle_number)

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

async def weekly_reset():
    while True:
        now = datetime.utcnow()
        days_until_wednesday = (2 - now.weekday() + 7) % 7
        if days_until_wednesday == 0:
            days_until_wednesday = 7
        next_reset = datetime.combine((now + timedelta(days=days_until_wednesday)).date(), datetime.min.time())
        wait_time = (next_reset - now).total_seconds()
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ä–µ–¥—ã: {wait_time // 3600:.0f}—á {(wait_time % 3600) // 60:.0f}–º")
        await asyncio.sleep(wait_time)

        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞...")
            row = supabase.table("weekly_voice_stats").select("cycle_number").order("cycle_number", desc=True).limit(1).execute()
            cycle_number = row.data[0]["cycle_number"] if row.data else 0
            week_data = supabase.table("weekly_voice_stats").select("week_number").eq("cycle_number", cycle_number).order("week_number", desc=True).limit(1).execute()
            max_week_number = week_data.data[0]["week_number"] if week_data.data else 0
            if max_week_number >= 12:
                cycle_number += 1
                max_week_number = 0

            voice_time_rows = supabase.table("voice_time").select("user_id", "total_seconds").execute()

            user_times = []
            for record in voice_time_rows.data:
                user_id = record["user_id"]
                total_seconds = record["total_seconds"]
                user_times.append((user_id, total_seconds))

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            user_times.sort(key=lambda x: x[1], reverse=True)

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
            for i, (user_id, total_seconds) in enumerate(user_times):
                if total_seconds < 60:  # –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã - –±–µ–∑ –æ–ø—ã—Ç–∞
                    continue

                if i == 0:
                    exp = 10
                elif i in [1, 2]:
                    exp = 8
                elif 3 <= i <= 6:
                    exp = 6
                elif 7 <= i <= 9:
                    exp = 4
                else:
                    exp = 2

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
                update_experience(user_id, exp)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                supabase.table("weekly_voice_stats").insert({
                    "cycle_number": cycle_number,
                    "week_number": max_week_number + 1,
                    "user_id": user_id,
                    "total_seconds": total_seconds
                }).execute()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            await generate_and_send_graph(bot, channel_id=1382278788464771173, cycle_number=cycle_number)

            # –û—á–∏—â–∞–µ–º voice_time
            supabase.table("voice_time").update({"total_seconds": 0}).neq("user_id", -1).execute()

            print("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def update_experience(user_id, added_exp):
    row = supabase.table("user_levels").select("*").eq("user_id", user_id).limit(1).execute()
    if row.data:
        exp = row.data[0]["exp"] + added_exp
        level = calculate_level(exp)
        supabase.table("user_levels").update({"exp": exp, "level": level}).eq("user_id", user_id).execute()
    else:
        supabase.table("user_levels").insert({
            "user_id": user_id,
            "exp": added_exp,
            "level": calculate_level(added_exp)
        }).execute()

def calculate_level(exp):
    if exp < 125:  # 1-5 —É—Ä–æ–≤–Ω–∏ –ø–æ 25
        return exp // 25 + 1
    elif exp < 375:  # 6-10 —É—Ä–æ–≤–Ω–∏ –ø–æ 50
        return 5 + (exp - 125) // 50 + 1
    elif exp < 1875:  # 11-25 —É—Ä–æ–≤–Ω–∏ –ø–æ 100
        return 10 + (exp - 375) // 100 + 1
    else:  # 26+
        return 25 + (exp - 1875) // 150 + 1

def get_next_level_exp(level: int) -> int:
    if level < 5:
        return 25 * level
    elif level < 10:
        return 125 + 50 * (level - 5)
    elif level < 25:
        return 375 + 100 * (level - 10)
    else:
        return 1875 + 150 * (level - 25)

def get_next_level_exp(level):
    return 50 + (level - 1) * 25

def calculate_level_from_exp(exp):
    level = 1
    total = 0
    while exp >= get_next_level_exp(level):
        total += get_next_level_exp(level)
        level += 1
    return level, exp - total, get_next_level_exp(level)

def get_total_exp_before(level):
    total = 0
    for l in range(1, level):
        total += get_next_level_exp(l)
    return total


        
@bot.command()
async def stat(ctx, member: discord.Member = None):
    try:
        member = member or ctx.author
        user_id = member.id


        # --- PUBG: –ø–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–ª–æ–≤—É –Ω–∏–∫–∞ ---
        pubg_name = member.display_name.split(" ")[0].strip()
        print(f"PUBG –ø–æ–∏—Å–∫ –Ω–∏–∫–∞: {pubg_name}")
        headers = {
            "Authorization": f"Bearer {PUBG_API_KEY}",
            "Accept": "application/vnd.api+json"
        }

        # 1. –ü–æ–ª—É—á–∞–µ–º ID –∏–≥—Ä–æ–∫–∞
        url_player = f"https://api.pubg.com/shards/{PUBG_PLATFORM}/players?filter[playerNames]={pubg_name}"
        resp_player = requests.get(url_player, headers=headers).json()
        print(resp_player)
        player_id = resp_player["data"][0]["id"] if "data" in resp_player and resp_player["data"] else None

        average_damage = 0
        if player_id:
    # 2) –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π
            url_seasons = f"https://api.pubg.com/shards/{PUBG_PLATFORM}/seasons"
            resp_seasons = requests.get(url_seasons, headers=headers).json()
            seasons = resp_seasons.get("data", [])
            current = next((s for s in seasons if s["attributes"].get("isCurrentSeason")), None)
            season_id = current["id"] if current else None

            if season_id:
        # 3) –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–µ–∑–æ–Ω—É
                url_stats = f"https://api.pubg.com/shards/{PUBG_PLATFORM}/players/{player_id}/seasons/{season_id}"
                resp_stats = requests.get(url_stats, headers=headers).json()
                squad_stats = resp_stats["data"]["attributes"]["gameModeStats"].get("squad-fpp", {})
                rounds = squad_stats.get("roundsPlayed", 0)
                if rounds > 0:
                    average_damage = squad_stats.get("damageDealt", 0) / rounds

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase
        row = supabase.table("user_levels").select("*").eq("user_id", user_id).limit(1).execute()
        stats = row.data[0] if row.data else {"exp": 0, "level": 1}
        level = stats["level"]
        exp = stats["exp"]

        time_row = supabase.table("voice_time").select("total_seconds").eq("user_id", user_id).execute()
        total_seconds = sum(r["total_seconds"] for r in time_row.data) if time_row.data else 0
        total_hours = total_seconds / 3600
        avg_hours = total_hours / max(len(time_row.data), 1) if time_row.data else 0

        # –í—ã–±–æ—Ä —Ñ–æ–Ω–∞ –ø–æ —É—Ä–æ–≤–Ω—é
        if level <= 5:
            background_path = "1-5.png"
        elif level <= 10:
            background_path = "5-10.png"
        elif level <= 25:
            background_path = "10-25.png"
        else:
            background_path = "25+.png"

        img = Image.open(background_path).convert("RGBA")
        draw = ImageDraw.Draw(img)
        width, height = img.size

        # –®—Ä–∏—Ñ—Ç—ã
        font_path = "FluffyFont.otf"
        name_font = ImageFont.truetype(font_path, 24)
        small_font = ImageFont.truetype(font_path, 16)

        # –ê–≤–∞—Ç–∞—Ä
        avatar_asset = member.avatar or member.display_avatar
        avatar_bytes = await avatar_asset.read()
        avatar = Image.open(BytesIO(avatar_bytes)).convert("RGBA")
        avatar_size = 160
        avatar = avatar.resize((int(avatar_size * 0.85), int(avatar_size * 0.85)))
        avatar = ImageOps.fit(avatar, avatar.size, centering=(0.5, 0.5))
        mask = Image.new("L", avatar.size, 0)
        draw_mask = ImageDraw.Draw(mask)
        draw_mask.ellipse((0, 0, avatar.size[0], avatar.size[1]), fill=255)
        avatar.putalpha(mask)

        avatar_x = 50
        avatar_y = height // 2 - 80
        img.paste(avatar, (avatar_x, avatar_y), avatar)

        # –ö—Ä—É–≥–æ–≤–∞—è —à–∫–∞–ª–∞ –æ–ø—ã—Ç–∞
        avatar_width, avatar_height = avatar.size
        center = (avatar_x + avatar_width // 2, avatar_y + avatar_height // 2)
        radius = avatar_width // 2 + 5
        thickness = 4
        next_level_exp = get_next_level_exp(level)
        exp_on_this_level = exp - get_total_exp_before(level)
        progress = min(max(exp_on_this_level / next_level_exp, 0), 1.0)
        start_angle = -90
        end_angle = start_angle + int(360 * progress)

        for i in range(start_angle, end_angle):
            angle_rad = math.radians(i)
            x = center[0] + radius * math.cos(angle_rad)
            y = center[1] + radius * math.sin(angle_rad)
            draw.ellipse(
                (x - thickness//2, y - thickness//2, x + thickness//2, y + thickness//2),
                fill=(255, 255 - (i % 255), 0)
            )

        # –¢–µ–∫—Å—Ç
        text_x = 230
        line_height = 24

        draw.text((text_x, avatar_y - 5), member.display_name, font=name_font, fill="white", stroke_width=1, stroke_fill="black")
        draw.text((text_x, avatar_y + line_height), f"–°—Ä–µ–¥–Ω–µ–µ: {avg_hours:.1f} —á.", font=small_font, fill="white", stroke_width=1, stroke_fill="black")
        draw.text((text_x, avatar_y + line_height * 2), f"–û–±—â–µ–µ: {total_hours:.1f} —á.", font=small_font, fill="white", stroke_width=1, stroke_fill="black")
        draw.text((text_x, avatar_y + line_height * 3), f"–£—Ä–æ–≤–µ–Ω—å: {level}", font=small_font, fill="white", stroke_width=1, stroke_fill="black")
        draw.text((text_x, avatar_y + line_height * 4), f"–û–ø—ã—Ç: {exp_on_this_level}/{next_level_exp}", font=small_font, fill="white", stroke_width=1, stroke_fill="black")

        # PUBG —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        draw.text((text_x, avatar_y + line_height * 5), f"PUBG Squad —É—Ä–æ–Ω: {average_damage:.1f}", font=small_font, fill="white", stroke_width=1, stroke_fill="black")

        filename = f"stat_{user_id}.png"
        img.save(filename)
        stat_msg = await ctx.send(file=discord.File(filename))

        # –£–¥–∞–ª–µ–Ω–∏–µ
        async def delete_later():
            await asyncio.sleep(120)
            try:
                await stat_msg.delete()
            except discord.NotFound:
                pass
            try:
                os.remove(filename)
            except FileNotFoundError:
                pass

        bot.loop.create_task(delete_later())

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stat: {e}")


@bot.command()
async def setexp(ctx, member: discord.Member = None):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∞–≤—Ç–æ—Ä–∞
    if ctx.author.id != 455023858463014922:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ—Ä
    member = member or ctx.author
    user_id = member.id

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç
        update_experience(user_id, 10)
        await ctx.send(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.display_name} –Ω–∞—á–∏—Å–ª–µ–Ω–æ +10 –æ–ø—ã—Ç–∞!")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ–ø—ã—Ç–∞: {e}")

@bot.command()
@commands.has_permissions(manage_messages=True)
async def resetstat(ctx, member: discord.Member):
    try:
        user_id = member.id

        # –û–±–Ω—É–ª—è–µ–º –æ–ø—ã—Ç
        supabase.table("user_levels").upsert({"user_id": user_id, "exp": 0}).execute()
        await ctx.send(f"üîÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} —Å–±—Ä–æ—à–µ–Ω–∞.")

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
#//////////////////////////////////////
AUTHORIZED_USER_ID = 455023858463014922

@bot.command()
async def generatestat(ctx):
    if ctx.author.id != AUTHORIZED_USER_ID:
        await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        print("üîÑ –†—É—á–Ω–æ–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π cycle_number
        row = supabase.table("weekly_voice_stats").select("cycle_number").order("cycle_number", desc=True).limit(1).execute()
        cycle_number = row.data[0]["cycle_number"] if row.data else 0

        # –ü–æ–¥—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
        week_data = supabase.table("weekly_voice_stats") \
            .select("week_number") \
            .eq("cycle_number", cycle_number) \
            .order("week_number", desc=True) \
            .limit(1) \
            .execute()

        max_week_number = week_data.data[0]["week_number"] if week_data.data else 0

        if max_week_number >= 12:
            cycle_number += 1
            max_week_number = 0

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ voice_time
        voice_time_rows = supabase.table("voice_time").select("user_id", "total_seconds").execute()
        for record in voice_time_rows.data:
            user_id = record["user_id"]
            total_seconds = record["total_seconds"]
            supabase.table("weekly_voice_stats").insert({
                "cycle_number": cycle_number,
                "week_number": max_week_number + 1,
                "user_id": user_id,
                "total_seconds": total_seconds
            }).execute()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        await generate_and_send_graph(bot, ctx.channel.id, cycle_number)

        # –û–±–Ω—É–ª—è–µ–º voice_time
        supabase.table("voice_time").update({"total_seconds": 0}).neq("user_id", -1).execute()

        await ctx.send("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –≥—Ä–∞—Ñ–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ generatestat: {e}")



token = os.getenv("TOKEN")



async def main():
    keep_alive()
    asyncio.create_task(weekly_reset())
    await bot.start(token)

asyncio.run(main())
#await bot.start("")
