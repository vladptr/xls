import discord
from discord.ext import commands
from discord.ui import View, Select
from discord.ui import View, Button
import random
import time
import yt_dlp
import asyncio
from dotenv import load_dotenv
import os
import io
import nacl
import math
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib import rcParams
import asyncpg
from datetime import datetime, timedelta
from supabase import create_client, Client
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from webserver import keep_alive

setup_messages = {}
channel_locks = {}
room_modes = {}
last_rename_times = {}

users = {}
weeks = []

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.voice_states = True
intents.message_content = True

SERVICE_ACCOUNT_FILE = 'botfile.json'
SCOPES = ['https://www.googleapis.com/auth/drive.file']
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)
drive_service = build('drive', 'v3', credentials=credentials)

bot = commands.Bot(command_prefix="!", intents=intents)
LEADERBOARD_CHANNEL_ID = 1371926685435428927

def get_connection():
    url = "https://qyqicdyzaagumqjlczoj.supabase.co"
    key = os.getenv("keykey")  
    return create_client(url, key)

supabase = get_connection()
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏
music_queue = []
repeat_mode = False

YDL_OPTIONS = {'format': 'bestaudio'}
FFMPEG_OPTIONS = {'options': '-vn'}

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.voice_states = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º—É–∑—ã–∫–∏
music_queue = []
repeat_mode = False

YDL_OPTIONS = {'format': 'bestaudio'}
FFMPEG_OPTIONS = {'options': '-vn'}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
TRIGGER_CHANNELS = {
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–∫–µ–¥ —Ä—É–º—É": {"base": "üèÜ„Éª–†–∞–Ω–∫–µ–¥ —Ä—É–º–∞", "category": "–†–∞–Ω–∫–µ–¥üî¥"},
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å –ø–∞–±–ª–∏–∫ —Ä—É–º—É": {"base": "üü¢„Éª–ü–∞–±–ª–∏–∫ —Ä—É–º–∞", "category": "–ü–∞–±–ª–∏–∫üî¥"},
    "üî¥„Éª–°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–º–Ω–∞—Ç—É": {"base": "üéÆ„Éª–ö–∞—Å—Ç–æ–º –∏–≥—Ä–∞", "category": "–ö–∞—Å—Ç–æ–º–∫–∏üî¥"}
}

created_channels = {}
channel_bases = {}

# –ú—É–∑ —Ñ—É–Ω–∫—Ü–∏–∏
async def play_next(ctx):
    global music_queue, repeat_mode
    if music_queue:
        url = music_queue[0] if not repeat_mode else music_queue[-1]

        with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
            info = ydl.extract_info(url, download=False)
            audio_url = info['url']

        source = await discord.FFmpegOpusAudio.from_probe(audio_url, **FFMPEG_OPTIONS)
        ctx.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop))

        if not repeat_mode:
            music_queue.pop(0)
    else:
        await asyncio.sleep(1)

@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")


@bot.event
async def on_member_join(member):
    channel_id = 1183130293545222205  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
    channel = bot.get_channel(channel_id)
    if channel:
        await channel.send(f"–ü—Ä–∏–≤–µ—Ç, {member.mention}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä! üéâ –ü—Ä–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–º–µ–Ω–∏ —Å–≤–æ–π –Ω–∏–∫ –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–º–µ—Ä–µ: ```–ù–∏–∫ –≤ –∏–≥—Ä–µ (–ò–º—è)```")
    else:
        print("–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@bot.command()
async def gonki(ctx):
    await ctx.send("–ø–æ–µ—Ö–∞–ª–∏! —è –±–µ—Ä—É –≥–æ–Ω–æ—á–Ω—É—é –∫–∞–ª—è—Å–∫—É ‚ôø")

@bot.command()
async def cleargraph(ctx):
    try:
        response = supabase.table("weekly_voice_stats").delete().neq("cycle_number", -1).execute()
        response = supabase.table("voice_time").delete().gt("user_id", 0).execute()
        if response.data is None:
            await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç).")
            return

        await ctx.send("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    except Exception as e:
        await ctx.send(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

class LeaderboardView(View):
    def __init__(self, data, ctx):
        super().__init__(timeout=60)
        self.data = data
        self.ctx = ctx
        self.page = 0
        self.items_per_page = 10
        self.max_page = math.ceil(len(data) / self.items_per_page) - 1

        self.prev_button = Button(label="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", style=discord.ButtonStyle.primary)
        self.next_button = Button(label="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", style=discord.ButtonStyle.primary)
        self.prev_button.callback = self.prev_page
        self.next_button.callback = self.next_page
        self.add_item(self.prev_button)
        self.add_item(self.next_button)

    async def prev_page(self, interaction):
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("–≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è —Ç–µ–±—è!", ephemeral=True)
            return
        if self.page > 0:
            self.page -= 1
            await self.update_message(interaction)

    async def next_page(self, interaction):
        if interaction.user != self.ctx.author:
            await interaction.response.send_message("–≠—Ç–æ –º–µ–Ω—é –Ω–µ –¥–ª—è —Ç–µ–±—è!", ephemeral=True)
            return
        if self.page < self.max_page:
            self.page += 1
            await self.update_message(interaction)

    async def update_message(self, interaction):
        embed = self.generate_embed()
        await interaction.response.edit_message(embed=embed, view=self)

    def generate_embed(self):
        start = self.page * self.items_per_page
        end = start + self.items_per_page
        page_data = self.data[start:end]
        
        embed = discord.Embed(
            title=f"üèÜ –¢–æ–ø –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page + 1}/{self.max_page + 1})",
            color=discord.Color.gold()
        )

        for i, row in enumerate(page_data, start=start + 1):
            user_id = row['user_id']
            total_seconds = row['total_seconds']
            member = self.ctx.guild.get_member(user_id)
            name = member.display_name if member else f"User {user_id}"
            hours, remainder = divmod(total_seconds, 3600)
            minutes, seconds = divmod(remainder, 60)
            embed.add_field(name=f"{i}. {name}", value=f"{hours}—á {minutes}–º {seconds}—Å", inline=False)
        
        return embed

@bot.command()
async def leaderboard(ctx):
    try:
        response = supabase.table("voice_time")\
            .select("user_id,total_seconds")\
            .order("total_seconds", desc=True)\
            .limit(50)\
            .execute()
        data = response.data

        if not data:
            await ctx.send("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö!")
            return

        view = LeaderboardView(data, ctx)
        embed = view.generate_embed()
        message = await ctx.send(embed=embed, view=view)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        await asyncio.sleep(10)
        await message.delete()
        try:
            await ctx.message.delete()
        except discord.errors.Forbidden:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
        await ctx.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤.")
#//////////////////////////////////////
@bot.command()
async def join(ctx):
    if ctx.author.voice:
        channel = ctx.author.voice.channel
        if ctx.voice_client is None:
            await channel.connect()
            await ctx.send("–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")
    else:
        await ctx.send("–¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ.")

@bot.command()
async def play(ctx, url):
    music_queue.append(url)
    await ctx.send(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {url}")
    if not ctx.voice_client:
        await join(ctx)
    if not ctx.voice_client.is_playing():
        await play_next(ctx)

@bot.command()
async def repeat(ctx):
    global repeat_mode
    repeat_mode = not repeat_mode
    await ctx.send(f"–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ {'–≤–∫–ª—é—á–µ–Ω' if repeat_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")

@bot.command()
async def skip(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await ctx.send("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")

@bot.command()
async def queue(ctx):
    if music_queue:
        await ctx.send("–û—á–µ—Ä–µ–¥—å:\n" + "\n".join(music_queue))
    else:
        await ctx.send("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@bot.command()
async def playlist(ctx):
    if music_queue:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç:\n" + "\n".join(music_queue))
    else:
        await ctx.send("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.")

@bot.command()
async def playlist_add(ctx, url):
    music_queue.append(url)
    await ctx.send(f"–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {url}")

@bot.command()
async def playlist_delete(ctx, index: int):
    if 0 <= index < len(music_queue):
        removed_track = music_queue.pop(index)
        await ctx.send(f"–¢—Ä–µ–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {removed_track}")
    else:
        await ctx.send("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Ç—Ä–µ–∫–∞.")

@bot.command()
async def leave(ctx):
    if ctx.voice_client:
        await ctx.voice_client.disconnect()
        await ctx.send("–í—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    else:
        await ctx.send("–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.")

# –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
class RoomTypeSelect(Select):
    def __init__(self, user_id, channel_id, mode="default"):
        # mode: "default" –¥–ª—è —Ä–∞–Ω–∫–µ–¥/–ø–∞–±–ª–∏–∫, "custom" –¥–ª—è –∫–∞—Å—Ç–æ–º–æ–∫
        if mode == "custom":
            options = [
                discord.SelectOption(label="Valorant", value="üéÆ„ÉªValorant"),
                discord.SelectOption(label="Among Us", value="üéÆ„ÉªAmong Us"),
                discord.SelectOption(label="CS:GO", value="üéÆ„ÉªCS:GO"),
                discord.SelectOption(label="Pummel party", value="üéÆ„ÉªPummel party"),
                discord.SelectOption(label="PICO PACK", value="üéÆ„ÉªPICO PACK"),
                discord.SelectOption(label="Dota 2", value="‚ôø„ÉªDota 2"),
                discord.SelectOption(label="Apex Legends", value="üéÆ„ÉªApex Legends"),
                discord.SelectOption(label="WARZONE", value="üéÆ„ÉªWARZONE"),
                discord.SelectOption(label="Rocket League", value="üéÆ„ÉªRocket League"),
                discord.SelectOption(label="Helldivers 2", value="üéÆ„ÉªHelldivers 2"),
            ]
        else:
            options = [
                discord.SelectOption(label="–î—É–æ", value="üë•„Éª–î—É–æ"),
                discord.SelectOption(label="–°–∫–≤–∞–¥", value="üë•„Éª–°–∫–≤–∞–¥"),
                discord.SelectOption(label="–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", value="üë•„Éª–°–∫–≤–∞–¥+")
            ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–º–Ω–∞—Ç—ã", min_values=1, max_values=1, options=options)
        self.user_id = user_id
        self.channel_id = channel_id
        self.mode = mode

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É!", ephemeral=True)
            return

        now = time.time()
        last_time = last_rename_times.get(self.channel_id, 0)
        cooldown = 660  # —Å–µ–∫—É–Ω–¥—ã

        if now - last_time < cooldown:
            remaining = round(cooldown - (now - last_time), 1)
            await interaction.response.send_message(
                f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ {cooldown} —Å–µ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë {remaining} —Å–µ–∫. –ù–µ –∑–∞—ë–±—ã–≤–∞–π –±–æ—Ç–∞ –∏–Ω–∞—á–µ –±—É–¥–µ—à—å –ø–æ—Å–ª–∞–Ω –Ω–∞—Ö—É–π!", ephemeral=True
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        last_rename_times[self.channel_id] = now

        channel = interaction.guild.get_channel(self.channel_id)
        if channel:
            await channel.edit(name=self.values[0])
            await interaction.response.send_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: **{self.values[0]}**", ephemeral=True)
        else:
            await interaction.response.send_message("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)

class PlayerCountSelect(Select):
    def __init__(self, user_id, channel_id, mode="default"):
        if mode == "custom":
            options = [
                discord.SelectOption(label=f"+{i}", value=str(i)) for i in range(1, 11)
            ] + [discord.SelectOption(label="–Ω–µ –∏—Å–∫–∞—Ç—å", value="none")]
        else:
            options = [
                discord.SelectOption(label="1Ô∏è‚É£", value="1"),
                discord.SelectOption(label="2Ô∏è‚É£", value="2"),
                discord.SelectOption(label="3Ô∏è‚É£", value="3"),
                discord.SelectOption(label="–Ω–µ –∏—Å–∫–∞—Ç—å", value="none")
            ]
        super().__init__(placeholder="–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –Ω—É–∂–Ω–æ?", min_values=1, max_values=1, options=options)
        self.user_id = user_id
        self.channel_id = channel_id
        self.mode = mode

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("–¢—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É!", ephemeral=True)
            return

        selection = self.values[0]
        if selection == "none":
            await interaction.response.send_message("–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç '–ù–µ –∏—Å–∫–∞—Ç—å', —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral=True)
            return

        guild = interaction.guild
        voice_channel = guild.get_channel(self.channel_id)
        if not voice_channel:
            await interaction.response.send_message("–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        text_channel = discord.utils.get(guild.text_channels, name="üîç„Éª–ø–æ–∏—Å–∫-—Ç–∏–º—ã")
        if not text_channel:
            await interaction.response.send_message("–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª '–ø–æ–∏—Å–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        count = self.values[0]
        msg = f"+{count} <@&1159121098965786634> <#{voice_channel.id}> {interaction.user.mention}"
        sent_msg = await text_channel.send(msg)
        await interaction.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª '–ø–æ–∏—Å–∫'.", ephemeral=True)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞
        await asyncio.sleep(10800)
        await sent_msg.delete()


class RoomSetupView(View):
    def __init__(self, user_id, channel_id, mode="default"):
        super().__init__(timeout=300000)
        self.add_item(RoomTypeSelect(user_id, channel_id, mode))
        self.add_item(PlayerCountSelect(user_id, channel_id, mode))

async def get_channel_lock(channel_id):
    if channel_id not in channel_locks:
        channel_locks[channel_id] = asyncio.Lock()
    return channel_locks[channel_id]

@bot.event
async def on_voice_state_update(member, before, after):
    user_id = member.id
    now = datetime.utcnow().timestamp()

    try:
        if after.channel and not before.channel:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à—ë–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            response = supabase.table("voice_sessions").insert({
                "user_id": user_id,
                "start_time": now
            }).execute()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—É–ª–∏—Å—å
            if not response.data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–µ—Å—Å–∏–∏: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Supabase")

        elif before.channel and not after.channel:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ‚Äî –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞
            row = supabase.table("voice_sessions").select("start_time").eq("user_id", user_id).limit(1).execute()

            if not row.data:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return

            start_time = row.data[0]["start_time"]
            duration = int(now - start_time)

            # –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
            del_resp = supabase.table("voice_sessions").delete().eq("user_id", user_id).execute()
            if not del_resp.data:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")

            # –û–±–Ω–æ–≤–ª—è–µ–º/–≤—Å—Ç–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ voice_time
            time_row = supabase.table("voice_time").select("total_seconds").eq("user_id", user_id).limit(1).execute()
            if time_row.data:
                total_seconds = time_row.data[0]["total_seconds"] + duration
                upd_resp = supabase.table("voice_time").update({"total_seconds": total_seconds}).eq("user_id", user_id).execute()
                if not upd_resp.data:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                ins_resp = supabase.table("voice_time").insert({
                    "user_id": user_id,
                    "total_seconds": duration
                }).execute()
                if not ins_resp.data:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if before.channel and before.channel.id in created_channels:
        await asyncio.sleep(1)
        lock = await get_channel_lock(before.channel.id)
        async with lock:
            owner_id = created_channels[before.channel.id]
            members = before.channel.members

            if len(members) == 0:
                await before.channel.delete()
                created_channels.pop(before.channel.id, None)
                channel_bases.pop(before.channel.id, None)
                setup_messages.pop(before.channel.id, None)
                print(f"–£–¥–∞–ª—ë–Ω –ø—É—Å—Ç–æ–π –∫–∞–Ω–∞–ª: {before.channel.name}")
                room_modes.pop(before.channel.id, None)
                return

            if member.id == owner_id:
                new_owner = random.choice(members)
                created_channels[before.channel.id] = new_owner.id
                old_msg = setup_messages.get(before.channel.id)
                if old_msg:
                    try:
                        await old_msg.delete()
                        print("‚úÖ –°—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
                    except discord.NotFound:
                        print("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ.")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    finally:
                        setup_messages.pop(before.channel.id, None)

                overwrite = before.channel.overwrites_for(new_owner)
                overwrite.manage_channels = True
                overwrite.move_members = True
                overwrite.connect = True
                await before.channel.set_permissions(new_owner, overwrite=overwrite)

                mode = room_modes.get(before.channel.id, "default")
                view = RoomSetupView(new_owner.id, before.channel.id, mode)
                new_msg = await before.channel.send(
                    f"–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã –≤—ã—à–µ–ª. –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {new_owner.mention}\n"
                    f"{new_owner.mention}, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É:",
                    view=view
                )
                setup_messages[before.channel.id] = new_msg
                print(f"–ù–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: {new_owner.name} –¥–ª—è –∫–∞–Ω–∞–ª–∞ {before.channel.name}")

    if not after.channel or after.channel.name not in TRIGGER_CHANNELS:
        return

    if after.channel and after.channel.name in TRIGGER_CHANNELS:
        conf = TRIGGER_CHANNELS[after.channel.name]
        guild = member.guild
        category = discord.utils.get(guild.categories, name=conf["category"])
        if not category:
            print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {conf['category']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        existing = [
            ch for ch in guild.voice_channels
            if ch.name.startswith(conf["base"]) and ch.category == category
        ]
        number = 1
        base_name = conf["base"]
        new_name = f"{base_name} #{number}"
        while any(ch.name == new_name for ch in existing):
            number += 1
            new_name = f"{base_name} #{number}"

        new_channel = await guild.create_voice_channel(new_name, category=category)
        await member.move_to(new_channel)
        created_channels[new_channel.id] = member.id
        channel_bases[new_channel.id] = base_name

        mode = "custom" if conf["category"] == "–ö–∞—Å—Ç–æ–º–∫–∏üî¥" else "default"
        room_modes[new_channel.id] = mode
        view = RoomSetupView(member.id, new_channel.id, mode)
        msg = await new_channel.send(f"{member.mention}, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É:", view=view)
        setup_messages[new_channel.id] = msg



#/////////////////////////////////////////////////////
async def upload_to_google_drive(file_path, folder_id=None):
    file_metadata = {'name': file_path.split('/')[-1]}
    if folder_id:
        file_metadata['parents'] = [folder_id]

    media = MediaFileUpload(file_path, mimetype='image/png')
    file = drive_service.files().create(
        body=file_metadata,
        media_body=media,
        fields='id, webViewLink'
    ).execute()
    print(f"–§–∞–π–ª {file_path} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Google Drive. –°—Å—ã–ª–∫–∞: {file['webViewLink']}")
    return file['id'], file['webViewLink']

async def generate_and_send_graph(bot, channel_id, cycle_number):
    try:
        response = supabase.table("weekly_voice_stats") \
            .select("week_number, user_id, total_seconds") \
            .eq("cycle_number", cycle_number) \
            .order("week_number") \
            .order("total_seconds") \
            .execute()

        data = response.data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return

    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    users = {}
    weeks = set()
    for row in data:
        week_number = row['week_number']
        user_id = row['user_id']
        total_seconds = row['total_seconds']
        weeks.add(week_number)
        users.setdefault(user_id, {})[week_number] = total_seconds / 3600  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Å—ã

    weeks = sorted(list(weeks))
    user_ids = list(users.keys())

    if not user_ids:
        print("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    guild = bot.get_guild(520183812148166656)
    await guild.fetch_members(limit=None)
    members_dict = {member.id: member.display_name for member in guild.members}

    rcParams['font.family'] = 'Arial'
    rcParams['text.color'] = 'white'
    rcParams['axes.labelcolor'] = 'white'
    rcParams['xtick.color'] = 'white'
    rcParams['ytick.color'] = 'white'

    xmin = min(weeks)
    xmax = max(weeks)
    range_x = xmax - xmin if xmax != xmin else 1
    xmax += range_x * 0.18

    max_y = max([max(users[u].values()) for u in user_ids]) * 1.1 if user_ids else 1
    ymin, ymax = 0, max_y

    fig, ax = plt.subplots(figsize=(19.2, 10.8), dpi=100)
    background_img = mpimg.imread('backpack.jpg')
    fig.patch.set_alpha(0.0)
    fig.patch.set_facecolor('none')
    ax.set_facecolor('none')
    ax.imshow(background_img, extent=[xmin, xmax, ymin, ymax], aspect='auto', zorder=0)
    ax.set_xlim(xmin, xmax)
    ax.set_ylim(ymin, ymax)
    ax.tick_params(colors='white')
    ax.xaxis.label.set_color('white')
    ax.yaxis.label.set_color('white')
    ax.title.set_color('white')

    user_sums = {user_id: sum(users[user_id].values()) for user_id in user_ids}
    user_ids_sorted = sorted(user_ids, key=lambda u: user_sums[u], reverse=True)
    lines, labels = [], []
    for user_id in user_ids_sorted:
        member = bot.get_guild(1371926685435428924).get_member(user_id)
        member_name = member.display_name if member else f"User {user_id}"
        times = [users[user_id].get(week, 0) for week in weeks]
        line, = ax.plot(weeks, times, marker='o', label=member_name, zorder=1)
        lines.append(line)
        labels.append(member_name)
        for week, time in zip(weeks, times):
            if time > 0:
                ax.text(week, time, f"{int(time)}—á {int((time % 1) * 60)}–º", fontsize=8, weight='bold', color='white', zorder=2)

    ax.set_xlabel("–ù–µ–¥–µ–ª—è")
    ax.set_ylabel("–í—Ä–µ–º—è (—á–∞—Å—ã)")
    ax.set_title(f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –¶–∏–∫–ª {cycle_number}")
    ax.legend(lines, labels, loc='upper center', bbox_to_anchor=(0.1, -0.07), ncol=6, fontsize=8, frameon=False)

    filename = f"graph_cycle_{cycle_number}.png"
    plt.savefig(filename, bbox_inches='tight', facecolor=fig.get_facecolor())
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Discord
    channel = bot.get_channel(channel_id)
    if channel:
        with open(filename, 'rb') as f:
            await channel.send(content=f"–¶–∏–∫–ª {cycle_number}:", file=discord.File(f))
    else:
        print("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
    await upload_to_google_drive(filename, folder_id='1XXjk7oPlijNDSLoiCf2DayVmOMRX-gyK')

@bot.event
async def on_ready():
    bot.loop.create_task(weekly_reset())

#/////////////////////////////////////////////////////

def init_db():
    try:
        # –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ SQL –≤ Supabase
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

#/////////////////////////////////////////////////////

async def weekly_reset():
    while True:
        now = datetime.utcnow()
        next_monday = now + timedelta(days=(2 - now.weekday() + 7) % 7)
        next_reset = datetime.combine(next_monday.date(), datetime.min.time())
        wait_time = (next_reset - now).total_seconds()
        await asyncio.sleep(wait_time)

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π cycle_number
            row = supabase.table("weekly_voice_stats").select("cycle_number").order("cycle_number", desc=True).limit(1).execute()
            cycle_number = row.data[0]["cycle_number"] if row.data else 0

            # –ü–æ–¥—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ
            week_data = supabase.table("weekly_voice_stats") \
              .select("week_number") \
              .eq("cycle_number", cycle_number) \
              .order("week_number", desc=True) \
              .limit(1) \
              .execute()

            if week_data.data:
              max_week_number = week_data.data[0]["week_number"]
            else:
              max_week_number = 0

            if max_week_number >= 12:
              cycle_number += 1
              max_week_number = 0
            

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ voice_time
            voice_time_rows = supabase.table("voice_time").select("user_id", "total_seconds").execute()
            for record in voice_time_rows.data:
                user_id = record["user_id"]
                total_seconds = record["total_seconds"]
                supabase.table("weekly_voice_stats").insert({
                    "cycle_number": cycle_number,
                    "week_number": max_week_number + 1,
                    "user_id": user_id,
                    "total_seconds": total_seconds
                }).execute()

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞
            await generate_and_send_graph(bot, channel_id=1373789452463243314, cycle_number=cycle_number)

            # –û—á–∏—â–∞–µ–º voice_time
            response = supabase.table("voice_time").update({"total_seconds": 0}).neq("user_id", -1).execute()

            print("üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–±—Ä–æ—à–µ–Ω–∞!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.event
async def on_ready():
    init_db()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã
    bot.loop.create_task(weekly_reset())  # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Å–±—Ä–æ—Å–∞
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

#//////////////////////////////////////
token = os.getenv("TOKEN")
async def main():
    keep_alive()
    await bot.start(token)

asyncio.run(main())
#await bot.start("")
